


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Sudoku, CODE, READONLY
    2 00000000                 IMPORT           sendchar
    3 00000000                 EXPORT           start
    4 00000000                 PRESERVE8
    5 00000000         
    6 00000000         start
    7 00000000         
    8 00000000 E59F0448        LDR              R0, =gridOne
    9 00000004 E3A01000        MOV              R1, #0
   10 00000008 E3A02000        MOV              R2, #0
   11 0000000C EB0000B4        BL               sudoku
   12 00000010 E59F0438        LDR              R0, =gridOne
   13 00000014 EB0000F3        BL               printSolution
   14 00000018         
   15 00000018 EAFFFFFE 
                       stop    B                stop
   16 0000001C         
   17 0000001C         
   18 0000001C         
   19 0000001C         ; getSquare subroutine
   20 0000001C         ; Returns the byte size value of a digit in a given row 
                       and column
   21 0000001C         ;  R0 = grid start address
   22 0000001C         ;   R1 = Word size value of row
   23 0000001C         ;  R2 = Word size value of column
   24 0000001C         ;  Return register R0 returns byte size value of digit i
                       n given location
   25 0000001C         getSquare
   26 0000001C E92D40F0        STMFD            sp!, {R4-R7, lr}
   27 00000020 E1A04001        MOV              R4, R1      ;store parameters
   28 00000024 E1A06000        MOV              R6, R0
   29 00000028 E1A07002        MOV              R7, R2
   30 0000002C E3A05009        MOV              R5, #9      ;row size value
   31 00000030 E0040495        MUL              R4, R5, R4  ;index = row*row si
                                                            ze
   32 00000034 E0844007        ADD              R4, R4, R7  ;index = (row*rowsi
                                                            ze) + column
   33 00000038 E0866004        ADD              R6, R6, R4  ;add index to array
                                                             start address
   34 0000003C E5D60000        LDRB             R0, [R6]    ;load value at that
                                                             address
   35 00000040 E8BD80F0        LDMFD            sp!, {R4-R7, pc} ;restore stack
                                                             to original positi
                                                            on
   36 00000044         
   37 00000044         ; setSquare subroutine
   38 00000044         ; Set the value of the square at the given row and colum
                       n equal to the given byte size value
   39 00000044         ;  R0 = grid start address
   40 00000044         ;   R1 = Word size value of row
   41 00000044         ;  R2 = Word size value of column
   42 00000044         ;  R3 = Byte size value that square should be set to
   43 00000044         setSquare
   44 00000044 E92D41F0        STMFD            sp!, {R4-R8, lr}
   45 00000048 E1A04001        MOV              R4, R1      ;store parameters
   46 0000004C E1A06000        MOV              R6, R0
   47 00000050 E1A07003        MOV              R7, R3
   48 00000054 E1A08002        MOV              R8, R2
   49 00000058 E3A05009        MOV              R5, #9      ;row size value



ARM Macro Assembler    Page 2 


   50 0000005C E0040495        MUL              R4, R5, R4  ;index = row*row si
                                                            ze
   51 00000060 E0844008        ADD              R4, R4, R8  ;index = (row*rowsi
                                                            ze) + column
   52 00000064 E0866004        ADD              R6, R6, R4  ;add index to array
                                                             start address
   53 00000068 E5C67000        STRB             R7, [R6]    ;store passed value
                                                             at that address
   54 0000006C E8BD81F0        LDMFD            sp!, {R4-R8, pc} ;restore stack
                                                             to original positi
                                                            on
   55 00000070         
   56 00000070         
   57 00000070         
   58 00000070         ; isValid subroutine
   59 00000070         ; Return true if a given row and column has a valid answ
                       er in it otherwise return false
   60 00000070         ;   R0 = grid start address
   61 00000070         ;  R1 = Word size value of row
   62 00000070         ;  R2 = Word size value of column
   63 00000070         ;  Return register R0 returns 1 for true and 0 for false
                       
   64 00000070         isValid
   65 00000070 E92D43F0        STMFD            sp!, {R4-R9, lr}
   66 00000074 E1A04000        MOV              R4, R0      ;store grid address
                                                            
   67 00000078 E1A05001        MOV              R5, R1      ;stores row number
   68 0000007C E1A06002        MOV              R6, R2      ;store column numbe
                                                            r
   69 00000080 EBFFFFE5        BL               getSquare   ;retrieve square va
                                                            lue
   70 00000084 E1A08000        MOV              R8, R0      ;store value of tha
                                                            t position in R8
   71 00000088 E3A07000        MOV              R7, #0      ;row counter
   72 0000008C         forRows
   73 0000008C E3570009        CMP              R7, #9      ;check all addresse
                                                            s in this row
   74 00000090 0A00000C        BEQ              forCols     ;afterwards check a
                                                            ll addresses in thi
                                                            s column
   75 00000094 E1A02007        MOV              R2, R7      ;for each column ad
                                                            dress compare to pa
                                                            ssed row address
   76 00000098 E1560002        CMP              R6, R2      ;
   77 0000009C 0A000007        BEQ              skipSameAddress ;if the column 
                                                            and row address is 
                                                            equal to the passed
                                                             address don't chec
                                                            k if values at that
                                                             address are equal
   78 000000A0 E1A00004        MOV              R0, R4
   79 000000A4 E1A01005        MOV              R1, R5
   80 000000A8 EBFFFFDB        BL               getSquare   ;get value at this 
                                                            position
   81 000000AC E1A09000        MOV              R9, R0
   82 000000B0 E1590008        CMP              R9, R8      ;compare to value a
                                                            t given posoition
   83 000000B4 0A00001C        BEQ              returnFalse ;if they are equal 
                                                            this isn't valid so



ARM Macro Assembler    Page 3 


                                                            lution
   84 000000B8 E2877001        ADD              R7, R7, #1
   85 000000BC EAFFFFF2        B                forRows
   86 000000C0         skipSameAddress
   87 000000C0 E2877001        ADD              R7, R7, #1  ;increment without 
                                                            comparing if addres
                                                            s of values are equ
                                                            al
   88 000000C4 EAFFFFF0        B                forRows
   89 000000C8         forCols
   90 000000C8 E3A07000        MOV              R7, #0      ;count columns
   91 000000CC         for
   92 000000CC E3570009        CMP              R7, #9      ;if all columns are
                                                             checked branch to 
                                                            check subgrids
   93 000000D0 0A00000C        BEQ              grids
   94 000000D4 E1A01007        MOV              R1, R7
   95 000000D8 E1550001        CMP              R5, R1
   96 000000DC 0A000007        BEQ              skipSameCol ;skip checking of s
                                                            ame square
   97 000000E0 E1A00004        MOV              R0, R4
   98 000000E4 E1A02006        MOV              R2, R6
   99 000000E8 EBFFFFCB        BL               getSquare   ;get number of curr
                                                            ent square
  100 000000EC E1A09000        MOV              R9, R0
  101 000000F0 E1590008        CMP              R9, R8
  102 000000F4 0A00000C        BEQ              returnFalse ;if numbers equal r
                                                            eturn false
  103 000000F8 E2877001        ADD              R7, R7, #1  ;else increment
  104 000000FC EAFFFFF2        B                for
  105 00000100         skipSameCol
  106 00000100 E2877001        ADD              R7, R7, #1
  107 00000104 EAFFFFF0        B                for
  108 00000108         grids
  109 00000108 E1A00004        MOV              R0, R4
  110 0000010C E1A01005        MOV              R1, R5
  111 00000110 E1A02006        MOV              R2, R6
  112 00000114 EB000006        BL               checksubgrids ;checksubgrids(gr
                                                            id, row, column);
  113 00000118 E3500000        CMP              R0, #0
  114 0000011C 0A000002        BEQ              returnFalse ;if it returns fals
                                                            e return false
  115 00000120 EAFFFFFF        B                returnTrue  ;else return true
  116 00000124         
  117 00000124         returnTrue
  118 00000124 E3A00001        MOV              R0, #1
  119 00000128 E8BD83F0        LDMFD            sp!, {R4-R9, pc}
  120 0000012C         returnFalse
  121 0000012C E3A00000        MOV              R0, #0
  122 00000130 E8BD83F0        LDMFD            sp!, {R4-R9, pc}
  123 00000134         
  124 00000134         
  125 00000134         
  126 00000134         ; checksubgrids subroutine
  127 00000134         ; Return true if a the subgrid of a given square follows
                        the rules of sudoku
  128 00000134         ;   R0 = grid start address
  129 00000134         ;  R1 = Word size value of row
  130 00000134         ;  R2 = Word size value of column



ARM Macro Assembler    Page 4 


  131 00000134         ;  Return register R0 returns 1 for true and 0 for false
                       
  132 00000134         checksubgrids
  133 00000134 E92D5FF0        STMFD            sp!, {R4-R12, lr}
  134 00000138 E1A04000        MOV              R4, R0      ;store grid address
                                                            
  135 0000013C E1A05001        MOV              R5, R1      ;stores row number
  136 00000140 E1A06002        MOV              R6, R2      ;store column numbe
                                                            r
  137 00000144 EBFFFFB4        BL               getSquare
  138 00000148 E1A09000        MOV              R9, R0
  139 0000014C         foreachsubgrid                       ;assign what subgri
                                                            d a square is in ba
                                                            sed on its row and 
                                                            column
  140 0000014C E3550003        CMP              R5, #3
  141 00000150 AA000005        BGE              notfirstthree
  142 00000154 E3560003        CMP              R6, #3
  143 00000158 BA000011        BLT              subgridone
  144 0000015C E3560006        CMP              R6, #6
  145 00000160 BA000015        BLT              subgridtwo
  146 00000164 E3560009        CMP              R6, #9
  147 00000168 BA000019        BLT              subgridthree
  148 0000016C         notfirstthree
  149 0000016C E3550006        CMP              R5, #6
  150 00000170 AA000005        BGE              notsecondthree
  151 00000174 E3560003        CMP              R6, #3
  152 00000178 BA00001B        BLT              subgridfour
  153 0000017C E3560006        CMP              R6, #6
  154 00000180 BA00001F        BLT              subgridfive
  155 00000184 E3560009        CMP              R6, #9
  156 00000188 BA000023        BLT              subgridsix
  157 0000018C         notsecondthree
  158 0000018C E3560003        CMP              R6, #3
  159 00000190 BA000027        BLT              subgridseven
  160 00000194 E3560006        CMP              R6, #6
  161 00000198 BA00002B        BLT              subgrideight
  162 0000019C E3560009        CMP              R6, #9
  163 000001A0 BA00002F        BLT              subgridnine
  164 000001A4         
  165 000001A4         subgridone
  166 000001A4 E3A07000        MOV              R7, #0      ;rowstart
  167 000001A8 E3A0C003        MOV              R12, #3     ;rowend
  168 000001AC E3A08000        MOV              R8, #0      ;columnstart
  169 000001B0 E3A0A000        MOV              R10, #0     ;columnreset
  170 000001B4 E3A0B003        MOV              R11, #3     ;columnend
  171 000001B8 EA00002F        B                check
  172 000001BC         subgridtwo
  173 000001BC E3A07000        MOV              R7, #0      ;rowstart
  174 000001C0 E3A0C003        MOV              R12, #3     ;rowend
  175 000001C4 E3A08003        MOV              R8, #3      ;columnstart
  176 000001C8 E3A0A003        MOV              R10, #3     ;columnreset
  177 000001CC E3A0B006        MOV              R11, #6     ;columnend
  178 000001D0 EA000029        B                check
  179 000001D4         subgridthree
  180 000001D4 E3A07000        MOV              R7, #0      ;rowstart
  181 000001D8 E3A0C003        MOV              R12, #3     ;rowend
  182 000001DC E3A08006        MOV              R8, #6      ;columnstart
  183 000001E0 E3A0A006        MOV              R10, #6     ;columnreset



ARM Macro Assembler    Page 5 


  184 000001E4 E3A0B009        MOV              R11, #9     ;columnend
  185 000001E8 EA000023        B                check
  186 000001EC         subgridfour
  187 000001EC E3A07003        MOV              R7, #3      ;rowstart
  188 000001F0 E3A0C006        MOV              R12, #6     ;rowend
  189 000001F4 E3A08000        MOV              R8, #0      ;columnstart
  190 000001F8 E3A0A000        MOV              R10, #0     ;columnreset
  191 000001FC E3A0B003        MOV              R11, #3     ;columnend
  192 00000200 EA00001D        B                check
  193 00000204         subgridfive
  194 00000204 E3A07003        MOV              R7, #3      ;rowstart
  195 00000208 E3A0C006        MOV              R12, #6     ;rowend
  196 0000020C E3A08003        MOV              R8, #3      ;columnstart
  197 00000210 E3A0A003        MOV              R10, #3     ;columnreset
  198 00000214 E3A0B006        MOV              R11, #6     ;columnend
  199 00000218 EA000017        B                check
  200 0000021C         subgridsix
  201 0000021C E3A07003        MOV              R7, #3      ;rowstart
  202 00000220 E3A0C006        MOV              R12, #6     ;rowend
  203 00000224 E3A08006        MOV              R8, #6      ;columnstart
  204 00000228 E3A0A006        MOV              R10, #6     ;columnreset
  205 0000022C E3A0B009        MOV              R11, #9     ;columnend
  206 00000230 EA000011        B                check
  207 00000234         subgridseven
  208 00000234 E3A07006        MOV              R7, #6      ;rowstart
  209 00000238 E3A0C009        MOV              R12, #9     ;rowend
  210 0000023C E3A08000        MOV              R8, #0      ;columnstart
  211 00000240 E3A0A000        MOV              R10, #0     ;columnreset
  212 00000244 E3A0B003        MOV              R11, #3     ;columnend
  213 00000248 EA00000B        B                check
  214 0000024C         subgrideight
  215 0000024C E3A07006        MOV              R7, #6      ;rowstart
  216 00000250 E3A0C009        MOV              R12, #9     ;rowend
  217 00000254 E3A08003        MOV              R8, #3      ;columnstart
  218 00000258 E3A0A003        MOV              R10, #3     ;columnreset
  219 0000025C E3A0B006        MOV              R11, #6     ;columnend
  220 00000260 EA000005        B                check
  221 00000264         subgridnine
  222 00000264 E3A07006        MOV              R7, #6      ;rowstart
  223 00000268 E3A0C009        MOV              R12, #9     ;rowend
  224 0000026C E3A08006        MOV              R8, #6      ;columnstart
  225 00000270 E3A0A006        MOV              R10, #6     ;columnreset
  226 00000274 E3A0B009        MOV              R11, #9     ;columnend
  227 00000278 EAFFFFFF        B                check
  228 0000027C         
  229 0000027C         check
  230 0000027C         foreachrow
  231 0000027C E157000C        CMP              R7, R12
  232 00000280 0A000013        BEQ              truereturn  ;return true if the
                                                             end of rows is rea
                                                            ched
  233 00000284         foreachcol
  234 00000284 E158000B        CMP              R8, R11
  235 00000288 0A00000E        BEQ              incrementrow
  236 0000028C E1A00004        MOV              R0, R4
  237 00000290 E1A01007        MOV              R1, R7
  238 00000294 E1A02008        MOV              R2, R8
  239 00000298 EBFFFF5F        BL               getSquare   ;get value at curre
                                                            nt square



ARM Macro Assembler    Page 6 


  240 0000029C E3500000        CMP              R0, #0      ;if square equals z
                                                            ero skip this squar
                                                            e
  241 000002A0 0A000006        BEQ              incrementcol
  242 000002A4 E1550007        CMP              R5, R7
  243 000002A8 1A000002        BNE              notsame
  244 000002AC E1560008        CMP              R6, R8
  245 000002B0 1A000000        BNE              notsame
  246 000002B4 EA000001        B                incrementcol ;if addresses are 
                                                            the same increment 
                                                            and try next
  247 000002B8         notsame
  248 000002B8 E1500009        CMP              R0, R9
  249 000002BC 0A000006        BEQ              falsereturn ;if values are equa
                                                            l then return false
                                                            
  250 000002C0         incrementcol
  251 000002C0 E2888001        ADD              R8, R8, #1  ;if values aren't e
                                                            qual move to next c
                                                            olumn
  252 000002C4 EAFFFFEE        B                foreachcol
  253 000002C8         incrementrow
  254 000002C8 E2877001        ADD              R7, R7, #1  ;if last column is 
                                                            reached increment r
                                                            ows
  255 000002CC E1A0800A        MOV              R8, R10
  256 000002D0 EAFFFFE9        B                foreachrow
  257 000002D4         truereturn
  258 000002D4 E3A00001        MOV              R0, #1
  259 000002D8 E8BD9FF0        LDMFD            sp!, {R4-R12, pc}
  260 000002DC         falsereturn
  261 000002DC E3A00000        MOV              R0, #0
  262 000002E0 E8BD9FF0        LDMFD            sp!, {R4-R12, pc}
  263 000002E4         
  264 000002E4         
  265 000002E4         
  266 000002E4         
  267 000002E4         
  268 000002E4         ; sudoku subroutine
  269 000002E4         ;   R0 = grid start address
  270 000002E4         ;  R1 = Word size value of row
  271 000002E4         ;  R2 = Word size value of column
  272 000002E4         ;  Return register R0 returns 1 for true and 0 for false
                       
  273 000002E4         sudoku
  274 000002E4 E92D4FF0        STMFD            sp!, {R4-R11, lr}
  275 000002E8 E1A04000        MOV              R4, R0      ;store grid
  276 000002EC E1A05001        MOV              R5, R1      ;store row
  277 000002F0 E1A06002        MOV              R6, R2      ;store col
  278 000002F4 E3A07000        MOV              R7, #0      ;bool result = fals
                                                            e
  279 000002F8 E286A001        ADD              R10, R6, #1 ; next column = col
                                                             +1
  280 000002FC E1A09005        MOV              R9, R5      ;next Row = row
  281 00000300 E35A0008        CMP              R10, #8     ;if (nxtcol > 8)   
                                                             
  282 00000304 DA000001        BLE              lessthanorequal
  283 00000308 E3A0A000        MOV              R10, #0     ;nextcol = 0
  284 0000030C E2899001        ADD              R9, R9, #1  ;nextrow++



ARM Macro Assembler    Page 7 


  285 00000310         lessthanorequal
  286 00000310 E1A00004        MOV              R0, R4
  287 00000314 E1A01005        MOV              R1, R5
  288 00000318 E1A02006        MOV              R2, R6
  289 0000031C EBFFFF3E        BL               getSquare
  290 00000320 E3500000        CMP              R0, #0      ;if ( getSquare(gri
                                                            d,row,col) != 0) {
  291 00000324 0A00000B        BEQ              emptySquare
  292 00000328 E3550008        CMP              R5, #8
  293 0000032C 1A000003        BNE              nextSquare
  294 00000330 E3560008        CMP              R6, #8
  295 00000334 1A000001        BNE              nextSquare  ;if (row == 8 &&col
                                                             == 8) 
  296 00000338 E3A00001        MOV              R0, #1      ;return true
  297 0000033C E8BD8FF0        LDMFD            sp!, {R4-R11, pc}
  298 00000340         nextSquare
  299 00000340 E1A00004        MOV              R0, R4      ;else
  300 00000344 E1A01009        MOV              R1, R9
  301 00000348 E1A0200A        MOV              R2, R10
  302 0000034C EBFFFFE4        BL               sudoku      ;result = suduko(gr
                                                            id,nxtrow,nxtcol);
  303 00000350 E1A07000        MOV              R7, R0
  304 00000354 EA000021        B                returnResult
  305 00000358         emptySquare
  306 00000358 E3A0B001        MOV              R11, #1     ;else
  307 0000035C         forbytetry                           ;for(byte try = 1; 
                                                            try<=9 && !result; 
                                                            try++)
  308 0000035C E35B0009        CMP              R11, #9
  309 00000360 CA000017        BGT              endforbyte
  310 00000364 E3570001        CMP              R7, #1
  311 00000368 0A000015        BEQ              endforbyte
  312 0000036C E1A00004        MOV              R0, R4
  313 00000370 E1A01005        MOV              R1, R5
  314 00000374 E1A02006        MOV              R2, R6
  315 00000378 E1A0300B        MOV              R3, R11
  316 0000037C EBFFFF30        BL               setSquare   ;setSquare(grid, ro
                                                            w, col, try)
  317 00000380 EBFFFF3A        BL               isValid     ;if(isValid(grid, r
                                                            ow, col))
  318 00000384 E3500000        CMP              R0, #0
  319 00000388 0A00000B        BEQ              incrementAndTryAgain
  320 0000038C E3550008        CMP              R5, #8
  321 00000390 1A000004        BNE              notLastEntry
  322 00000394 E3560008        CMP              R6, #8
  323 00000398 1A000002        BNE              notLastEntry ;if(row == 8 && co
                                                            l ==  8)
  324 0000039C E3A07001        MOV              R7, #1      ;return true
  325 000003A0 EA00000E        B                returnResult
  326 000003A4 EA000004        B                incrementAndTryAgain
  327 000003A8         notLastEntry
  328 000003A8 E1A00004        MOV              R0, R4      ;else
  329 000003AC E1A01009        MOV              R1, R9
  330 000003B0 E1A0200A        MOV              R2, R10
  331 000003B4 EBFFFFCA        BL               sudoku      ;return sudoku(grid
                                                            ,nxxtrow,nxtcol);
  332 000003B8 E1A07000        MOV              R7, R0
  333 000003BC         incrementAndTryAgain
  334 000003BC E28BB001        ADD              R11, R11, #1 ;try++



ARM Macro Assembler    Page 8 


  335 000003C0 EAFFFFE5        B                forbytetry
  336 000003C4         endforbyte
  337 000003C4 E3570001        CMP              R7, #1      ;if(!result)
  338 000003C8 0A000004        BEQ              returnResult
  339 000003CC E1A00004        MOV              R0, R4
  340 000003D0 E1A01005        MOV              R1, R5
  341 000003D4 E1A02006        MOV              R2, R6
  342 000003D8 E3A03000        MOV              R3, #0
  343 000003DC EBFFFF18        BL               setSquare   ;mistake was made s
                                                            etSquare(grid,row,c
                                                            ol,0)
  344 000003E0         returnResult
  345 000003E0 E1A00007        MOV              R0, R7      ;return result
  346 000003E4 E8BD8FF0        LDMFD            sp!, {R4-R11, pc}
  347 000003E8         
  348 000003E8         
  349 000003E8         
  350 000003E8         ; printSolution subroutine
  351 000003E8         ;   R0 = grid start address
  352 000003E8         printSolution
  353 000003E8 E92D43F0        STMFD            sp!, {R4-R9, lr}
  354 000003EC E1A04000        MOV              R4, R0      ;store grid address
                                                            
  355 000003F0 E3A05000        MOV              R5, #0      ;row counter
  356 000003F4 E3A06000        MOV              R6, #0      ;column counter
  357 000003F8 E3A08009        MOV              R8, #9      ;store row size
  358 000003FC         forRow
  359 000003FC E3550009        CMP              R5, #9
  360 00000400 0A000011        BEQ              endPrint
  361 00000404 E3A06000        MOV              R6, #0      ;column counter res
                                                            et for this row
  362 00000408         forColumns
  363 00000408 E3560009        CMP              R6, #9
  364 0000040C 0A00000A        BEQ              incrementRowCount
  365 00000410 E1A07005        MOV              R7, R5      ;index = row
  366 00000414 E0070798        MUL              R7, R8, R7  ;index = row * row 
                                                            size
  367 00000418 E0877006        ADD              R7, R7, R6  ;index = row * row 
                                                            size + col
  368 0000041C E0877004        ADD              R7, R7, R4  ;load next value
  369 00000420 E5D70000        LDRB             R0, [R7]
  370 00000424 E3A09000        LDR              R9,= 0
  371 00000428 E2809030        ADD              R9, R0, #0x30
  372 0000042C E1A00009        MOV              R0, R9
  373 00000430 EBFFFFFE        BL               sendchar
  374 00000434 E2866001        ADD              R6, R6, #1
  375 00000438 EAFFFFF2        B                forColumns
  376 0000043C         incrementRowCount
  377 0000043C E2855001        ADD              R5, R5, #1
  378 00000440 E3A0000A        MOV              R0, #0x0A
  379 00000444 EBFFFFFE        BL               sendchar
  380 00000448 EAFFFFEB        B                forRow
  381 0000044C         endPrint
  382 0000044C E8BD83F0        LDMFD            sp!, {R4-R9, pc}
  383 00000450         
  384 00000450 00000000 
              00000000         AREA             Grids, DATA, READWRITE
  385 00000000         
  386 00000000         gridOne



ARM Macro Assembler    Page 9 


  387 00000000 07 09 00 
              00 00 00 
              03 00 00         DCB              7,9,0,0,0,0,3,0,0
  388 00000009 00 00 00 
              00 00 06 
              09 00 00         DCB              0,0,0,0,0,6,9,0,0
  389 00000012 08 00 00 
              00 03 00 
              00 07 06         DCB              8,0,0,0,3,0,0,7,6
  390 0000001B 00 00 00 
              00 00 05 
              00 00 02         DCB              0,0,0,0,0,5,0,0,2
  391 00000024 00 00 05 
              04 01 08 
              07 00 00         DCB              0,0,5,4,1,8,7,0,0
  392 0000002D 04 00 00 
              07 00 00 
              00 00 00         DCB              4,0,0,7,0,0,0,0,0
  393 00000036 06 01 00 
              00 09 00 
              00 00 08         DCB              6,1,0,0,9,0,0,0,8
  394 0000003F 00 00 02 
              03 00 00 
              00 00 00         DCB              0,0,2,3,0,0,0,0,0
  395 00000048 00 00 09 
              00 00 00 
              00 05 04         DCB              0,0,9,0,0,0,0,5,4
  396 00000051         
  397 00000051         gridTwo
  398 00000051 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  399 0000005A 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  400 00000063 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  401 0000006C 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  402 00000075 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  403 0000007E 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  404 00000087 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  405 00000090 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  406 00000099 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  407 000000A2         
  408 000000A2         gridThree
  409 000000A2 00 00 00 



ARM Macro Assembler    Page 10 


              02 06 00 
              07 00 01         DCB              0,0,0,2,6,0,7,0,1
  410 000000AB 06 08 00 
              00 07 00 
              00 09 00         DCB              6,8,0,0,7,0,0,9,0
  411 000000B4 01 09 00 
              00 00 04 
              05 00 00         DCB              1,9,0,0,0,4,5,0,0
  412 000000BD 08 02 00 
              01 00 00 
              00 04 00         DCB              8,2,0,1,0,0,0,4,0
  413 000000C6 00 00 04 
              06 00 02 
              09 00 00         DCB              0,0,4,6,0,2,9,0,0
  414 000000CF 00 05 00 
              00 00 03 
              00 02 08         DCB              0,5,0,0,0,3,0,2,8
  415 000000D8 00 00 09 
              03 00 00 
              00 07 04         DCB              0,0,9,3,0,0,0,7,4
  416 000000E1 00 04 00 
              00 05 00 
              00 03 06         DCB              0,4,0,0,5,0,0,3,6
  417 000000EA 07 00 03 
              00 01 08 
              00 00 00         DCB              7,0,3,0,1,8,0,0,0
  418 000000F3         
  419 000000F3         gridFour
  420 000000F3 00 02 00 
              00 00 00 
              00 00 00         DCB              0,2,0,0,0,0,0,0,0
  421 000000FC 00 00 00 
              06 00 00 
              00 00 03         DCB              0,0,0,6,0,0,0,0,3
  422 00000105 00 07 04 
              00 08 00 
              00 00 00         DCB              0,7,4,0,8,0,0,0,0
  423 0000010E 00 00 00 
              00 00 03 
              00 00 02         DCB              0,0,0,0,0,3,0,0,2
  424 00000117 00 08 00 
              00 04 00 
              00 01 00         DCB              0,8,0,0,4,0,0,1,0
  425 00000120 06 00 00 
              05 00 00 
              00 00 00         DCB              6,0,0,5,0,0,0,0,0
  426 00000129 00 00 00 
              00 01 00 
              07 08 00         DCB              0,0,0,0,1,0,7,8,0
  427 00000132 05 00 00 
              00 00 09 
              00 00 00         DCB              5,0,0,0,0,9,0,0,0
  428 0000013B 00 00 00 
              00 00 00 
              00 04 00         DCB              0,0,0,0,0,0,0,4,0
  429 00000144         
  430 00000144         gridFive
  431 00000144 00 00 00 
              06 00 00 



ARM Macro Assembler    Page 11 


              04 00 00         DCB              0,0,0,6,0,0,4,0,0
  432 0000014D 07 00 00 
              00 00 03 
              06 00 00         DCB              7,0,0,0,0,3,6,0,0
  433 00000156 00 00 00 
              00 09 01 
              00 08 00         DCB              0,0,0,0,9,1,0,8,0
  434 0000015F 00 00 00 
              00 00 00 
              00 00 00         DCB              0,0,0,0,0,0,0,0,0
  435 00000168 00 05 00 
              01 08 00 
              00 00 03         DCB              0,5,0,1,8,0,0,0,3
  436 00000171 00 00 00 
              03 00 06 
              00 04 05         DCB              0,0,0,3,0,6,0,4,5
  437 0000017A 00 04 00 
              02 00 00 
              00 06 00         DCB              0,4,0,2,0,0,0,6,0
  438 00000183 09 00 03 
              00 00 00 
              00 00 00         DCB              9,0,3,0,0,0,0,0,0
  439 0000018C 00 02 00 
              00 00 00 
              01 00 00         DCB              0,2,0,0,0,0,1,0,0
  440 00000195         
  441 00000195         gridSix
  442 00000195 01 00 00 
              04 08 09 
              00 00 06         DCB              1,0,0,4,8,9,0,0,6
  443 0000019E 07 03 00 
              00 00 00 
              00 04 00         DCB              7,3,0,0,0,0,0,4,0
  444 000001A7 00 00 00 
              00 00 01 
              02 09 05         DCB              0,0,0,0,0,1,2,9,5
  445 000001B0 00 00 07 
              01 02 00 
              06 00 00         DCB              0,0,7,1,2,0,6,0,0
  446 000001B9 05 00 00 
              07 00 03 
              00 00 08         DCB              5,0,0,7,0,3,0,0,8
  447 000001C2 00 00 06 
              00 09 05 
              07 00 00         DCB              0,0,6,0,9,5,7,0,0
  448 000001CB 09 01 04 
              06 00 00 
              00 00 00         DCB              9,1,4,6,0,0,0,0,0
  449 000001D4 00 02 00 
              00 00 00 
              00 03 07         DCB              0,2,0,0,0,0,0,3,7
  450 000001DD 08 00 00 
              05 01 02 
              00 00 04         DCB              8,0,0,5,1,2,0,0,4
  451 000001E6                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\s
udoku.d -o.\sudoku.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -
IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB
 SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP S



ARM Macro Assembler    Page 12 


ETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pred
efine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\sudoku.lst Sudoku.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Sudoku 00000000

Symbol: Sudoku
   Definitions
      At line 1 in file Sudoku.s
   Uses
      None
Comment: Sudoku unused
check 0000027C

Symbol: check
   Definitions
      At line 229 in file Sudoku.s
   Uses
      At line 171 in file Sudoku.s
      At line 178 in file Sudoku.s
      At line 185 in file Sudoku.s
      At line 192 in file Sudoku.s
      At line 199 in file Sudoku.s
      At line 206 in file Sudoku.s
      At line 213 in file Sudoku.s
      At line 220 in file Sudoku.s
      At line 227 in file Sudoku.s

checksubgrids 00000134

Symbol: checksubgrids
   Definitions
      At line 132 in file Sudoku.s
   Uses
      At line 112 in file Sudoku.s
Comment: checksubgrids used once
emptySquare 00000358

Symbol: emptySquare
   Definitions
      At line 305 in file Sudoku.s
   Uses
      At line 291 in file Sudoku.s
Comment: emptySquare used once
endPrint 0000044C

Symbol: endPrint
   Definitions
      At line 381 in file Sudoku.s
   Uses
      At line 360 in file Sudoku.s
Comment: endPrint used once
endforbyte 000003C4

Symbol: endforbyte
   Definitions
      At line 336 in file Sudoku.s
   Uses
      At line 309 in file Sudoku.s
      At line 311 in file Sudoku.s

falsereturn 000002DC




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: falsereturn
   Definitions
      At line 260 in file Sudoku.s
   Uses
      At line 249 in file Sudoku.s
Comment: falsereturn used once
for 000000CC

Symbol: for
   Definitions
      At line 91 in file Sudoku.s
   Uses
      At line 104 in file Sudoku.s
      At line 107 in file Sudoku.s

forCols 000000C8

Symbol: forCols
   Definitions
      At line 89 in file Sudoku.s
   Uses
      At line 74 in file Sudoku.s
Comment: forCols used once
forColumns 00000408

Symbol: forColumns
   Definitions
      At line 362 in file Sudoku.s
   Uses
      At line 375 in file Sudoku.s
Comment: forColumns used once
forRow 000003FC

Symbol: forRow
   Definitions
      At line 358 in file Sudoku.s
   Uses
      At line 380 in file Sudoku.s
Comment: forRow used once
forRows 0000008C

Symbol: forRows
   Definitions
      At line 72 in file Sudoku.s
   Uses
      At line 85 in file Sudoku.s
      At line 88 in file Sudoku.s

forbytetry 0000035C

Symbol: forbytetry
   Definitions
      At line 307 in file Sudoku.s
   Uses
      At line 335 in file Sudoku.s
Comment: forbytetry used once
foreachcol 00000284

Symbol: foreachcol



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 233 in file Sudoku.s
   Uses
      At line 252 in file Sudoku.s
Comment: foreachcol used once
foreachrow 0000027C

Symbol: foreachrow
   Definitions
      At line 230 in file Sudoku.s
   Uses
      At line 256 in file Sudoku.s
Comment: foreachrow used once
foreachsubgrid 0000014C

Symbol: foreachsubgrid
   Definitions
      At line 139 in file Sudoku.s
   Uses
      None
Comment: foreachsubgrid unused
getSquare 0000001C

Symbol: getSquare
   Definitions
      At line 25 in file Sudoku.s
   Uses
      At line 69 in file Sudoku.s
      At line 80 in file Sudoku.s
      At line 99 in file Sudoku.s
      At line 137 in file Sudoku.s
      At line 239 in file Sudoku.s
      At line 289 in file Sudoku.s

grids 00000108

Symbol: grids
   Definitions
      At line 108 in file Sudoku.s
   Uses
      At line 93 in file Sudoku.s
Comment: grids used once
incrementAndTryAgain 000003BC

Symbol: incrementAndTryAgain
   Definitions
      At line 333 in file Sudoku.s
   Uses
      At line 319 in file Sudoku.s
      At line 326 in file Sudoku.s

incrementRowCount 0000043C

Symbol: incrementRowCount
   Definitions
      At line 376 in file Sudoku.s
   Uses
      At line 364 in file Sudoku.s
Comment: incrementRowCount used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

incrementcol 000002C0

Symbol: incrementcol
   Definitions
      At line 250 in file Sudoku.s
   Uses
      At line 241 in file Sudoku.s
      At line 246 in file Sudoku.s

incrementrow 000002C8

Symbol: incrementrow
   Definitions
      At line 253 in file Sudoku.s
   Uses
      At line 235 in file Sudoku.s
Comment: incrementrow used once
isValid 00000070

Symbol: isValid
   Definitions
      At line 64 in file Sudoku.s
   Uses
      At line 317 in file Sudoku.s
Comment: isValid used once
lessthanorequal 00000310

Symbol: lessthanorequal
   Definitions
      At line 285 in file Sudoku.s
   Uses
      At line 282 in file Sudoku.s
Comment: lessthanorequal used once
nextSquare 00000340

Symbol: nextSquare
   Definitions
      At line 298 in file Sudoku.s
   Uses
      At line 293 in file Sudoku.s
      At line 295 in file Sudoku.s

notLastEntry 000003A8

Symbol: notLastEntry
   Definitions
      At line 327 in file Sudoku.s
   Uses
      At line 321 in file Sudoku.s
      At line 323 in file Sudoku.s

notfirstthree 0000016C

Symbol: notfirstthree
   Definitions
      At line 148 in file Sudoku.s
   Uses
      At line 141 in file Sudoku.s
Comment: notfirstthree used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

notsame 000002B8

Symbol: notsame
   Definitions
      At line 247 in file Sudoku.s
   Uses
      At line 243 in file Sudoku.s
      At line 245 in file Sudoku.s

notsecondthree 0000018C

Symbol: notsecondthree
   Definitions
      At line 157 in file Sudoku.s
   Uses
      At line 150 in file Sudoku.s
Comment: notsecondthree used once
printSolution 000003E8

Symbol: printSolution
   Definitions
      At line 352 in file Sudoku.s
   Uses
      At line 13 in file Sudoku.s
Comment: printSolution used once
returnFalse 0000012C

Symbol: returnFalse
   Definitions
      At line 120 in file Sudoku.s
   Uses
      At line 83 in file Sudoku.s
      At line 102 in file Sudoku.s
      At line 114 in file Sudoku.s

returnResult 000003E0

Symbol: returnResult
   Definitions
      At line 344 in file Sudoku.s
   Uses
      At line 304 in file Sudoku.s
      At line 325 in file Sudoku.s
      At line 338 in file Sudoku.s

returnTrue 00000124

Symbol: returnTrue
   Definitions
      At line 117 in file Sudoku.s
   Uses
      At line 115 in file Sudoku.s
Comment: returnTrue used once
setSquare 00000044

Symbol: setSquare
   Definitions
      At line 43 in file Sudoku.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 316 in file Sudoku.s
      At line 343 in file Sudoku.s

skipSameAddress 000000C0

Symbol: skipSameAddress
   Definitions
      At line 86 in file Sudoku.s
   Uses
      At line 77 in file Sudoku.s
Comment: skipSameAddress used once
skipSameCol 00000100

Symbol: skipSameCol
   Definitions
      At line 105 in file Sudoku.s
   Uses
      At line 96 in file Sudoku.s
Comment: skipSameCol used once
start 00000000

Symbol: start
   Definitions
      At line 6 in file Sudoku.s
   Uses
      At line 3 in file Sudoku.s
Comment: start used once
stop 00000018

Symbol: stop
   Definitions
      At line 15 in file Sudoku.s
   Uses
      At line 15 in file Sudoku.s
Comment: stop used once
subgrideight 0000024C

Symbol: subgrideight
   Definitions
      At line 214 in file Sudoku.s
   Uses
      At line 161 in file Sudoku.s
Comment: subgrideight used once
subgridfive 00000204

Symbol: subgridfive
   Definitions
      At line 193 in file Sudoku.s
   Uses
      At line 154 in file Sudoku.s
Comment: subgridfive used once
subgridfour 000001EC

Symbol: subgridfour
   Definitions
      At line 186 in file Sudoku.s
   Uses
      At line 152 in file Sudoku.s
Comment: subgridfour used once



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

subgridnine 00000264

Symbol: subgridnine
   Definitions
      At line 221 in file Sudoku.s
   Uses
      At line 163 in file Sudoku.s
Comment: subgridnine used once
subgridone 000001A4

Symbol: subgridone
   Definitions
      At line 165 in file Sudoku.s
   Uses
      At line 143 in file Sudoku.s
Comment: subgridone used once
subgridseven 00000234

Symbol: subgridseven
   Definitions
      At line 207 in file Sudoku.s
   Uses
      At line 159 in file Sudoku.s
Comment: subgridseven used once
subgridsix 0000021C

Symbol: subgridsix
   Definitions
      At line 200 in file Sudoku.s
   Uses
      At line 156 in file Sudoku.s
Comment: subgridsix used once
subgridthree 000001D4

Symbol: subgridthree
   Definitions
      At line 179 in file Sudoku.s
   Uses
      At line 147 in file Sudoku.s
Comment: subgridthree used once
subgridtwo 000001BC

Symbol: subgridtwo
   Definitions
      At line 172 in file Sudoku.s
   Uses
      At line 145 in file Sudoku.s
Comment: subgridtwo used once
sudoku 000002E4

Symbol: sudoku
   Definitions
      At line 273 in file Sudoku.s
   Uses
      At line 11 in file Sudoku.s
      At line 302 in file Sudoku.s
      At line 331 in file Sudoku.s

truereturn 000002D4



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols


Symbol: truereturn
   Definitions
      At line 257 in file Sudoku.s
   Uses
      At line 232 in file Sudoku.s
Comment: truereturn used once
49 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Grids 00000000

Symbol: Grids
   Definitions
      At line 384 in file Sudoku.s
   Uses
      None
Comment: Grids unused
gridFive 00000144

Symbol: gridFive
   Definitions
      At line 430 in file Sudoku.s
   Uses
      None
Comment: gridFive unused
gridFour 000000F3

Symbol: gridFour
   Definitions
      At line 419 in file Sudoku.s
   Uses
      None
Comment: gridFour unused
gridOne 00000000

Symbol: gridOne
   Definitions
      At line 386 in file Sudoku.s
   Uses
      At line 8 in file Sudoku.s
      At line 12 in file Sudoku.s

gridSix 00000195

Symbol: gridSix
   Definitions
      At line 441 in file Sudoku.s
   Uses
      None
Comment: gridSix unused
gridThree 000000A2

Symbol: gridThree
   Definitions
      At line 408 in file Sudoku.s
   Uses
      None
Comment: gridThree unused
gridTwo 00000051

Symbol: gridTwo
   Definitions
      At line 397 in file Sudoku.s
   Uses
      None
Comment: gridTwo unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

sendchar 00000000

Symbol: sendchar
   Definitions
      At line 2 in file Sudoku.s
   Uses
      At line 373 in file Sudoku.s
      At line 379 in file Sudoku.s

1 symbol
397 symbols in table
